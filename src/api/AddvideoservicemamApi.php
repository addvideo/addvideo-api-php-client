<?php
/**
 * AddvideoservicemamApi
 * PHP version 5
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AddVideo REST API v1
 *
 * <h1>Welcome to AddVideo | easy video integration into your project</h1><p>AddVideo offers the integration of professional online video services and capabilities such as CDN, encoding, asset management and complex distribution workflows  with your favourite CMS. AddVideo processes and distributes your video contents as required, without interface- or CDN-specific implementations. Using AddVideo you will get:</p><ul><li>API: a powerful REST-API with free client SDKs available in many different programming languages incl. examples at http://github.com/addvideo</li><li>Encoding: media processing and video encoding services</li><li>CDN: use diverse very powerful global CDNs to distribute your contents</li><li>OTT: access to useful functionalities via the API</li><li>Development, Service und Maintenance: our team of high class software engineers and online video specialists is located in Frankfurt/Germany</li><li>Powerfull Infrastructure: system operations in high class data centres in Germany</li><li>In General: a fast growing set of features</li></ul><p>It has never been easier to add professional video modules to your platform on demand. AddVideo helps to slimline your integration efforts and provides the whole video workflow accessible through a simple programming interface.</p>
 *
 * OpenAPI spec version: 1
 * Contact: info@addvideo.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace de\addvideo\client\api;

use \de\addvideo\client\Configuration;
use \de\addvideo\client\ApiClient;
use \de\addvideo\client\ApiException;
use \de\addvideo\client\ObjectSerializer;

/**
 * AddvideoservicemamApi Class Doc Comment
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddvideoservicemamApi
{

    /**
     * API Client
     *
     * @var \de\addvideo\client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \de\addvideo\client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\de\addvideo\client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.addvideo.de/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \de\addvideo\client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \de\addvideo\client\ApiClient $apiClient set the API client
     *
     * @return AddvideoservicemamApi
     */
    public function setApiClient(\de\addvideo\client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addEntry
     *
     * Add a new Entry object
     *
     * @param \de\addvideo\client\model\EntryFullDTO $body Entry object that shall be added (required)
     * @return \de\addvideo\client\model\EntryFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addEntry($body)
    {
        list($response) = $this->addEntryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addEntryWithHttpInfo
     *
     * Add a new Entry object
     *
     * @param \de\addvideo\client\model\EntryFullDTO $body Entry object that shall be added (required)
     * @return Array of \de\addvideo\client\model\EntryFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addEntryWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addEntry');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/entry/addEntry";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EntryFullDTO',
                '/addvideo/service/mam/entry/addEntry'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EntryFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EntryFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFlavor
     *
     * Add a new Flavor object
     *
     * @param \de\addvideo\client\model\FlavorFullDTO $body Flavor object that shall be added (required)
     * @return \de\addvideo\client\model\FlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFlavor($body)
    {
        list($response) = $this->addFlavorWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addFlavorWithHttpInfo
     *
     * Add a new Flavor object
     *
     * @param \de\addvideo\client\model\FlavorFullDTO $body Flavor object that shall be added (required)
     * @return Array of \de\addvideo\client\model\FlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFlavorWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/flavor/addFlavor";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FlavorFullDTO',
                '/addvideo/service/mam/flavor/addFlavor'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addMAMService
     *
     * Add a new MAMService object
     *
     * @param \de\addvideo\client\model\MAMServiceFullDTO $body MAMService object that shall be added (required)
     * @return \de\addvideo\client\model\MAMServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addMAMService($body)
    {
        list($response) = $this->addMAMServiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addMAMServiceWithHttpInfo
     *
     * Add a new MAMService object
     *
     * @param \de\addvideo\client\model\MAMServiceFullDTO $body MAMService object that shall be added (required)
     * @return Array of \de\addvideo\client\model\MAMServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addMAMServiceWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addMAMService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/mam-service/addMAMService";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MAMServiceFullDTO',
                '/addvideo/service/mam/mam-service/addMAMService'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MAMServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MAMServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addMetadata
     *
     * Add a new Metadata object
     *
     * @param \de\addvideo\client\model\MetadataFullDTO $body Metadata object that shall be added (required)
     * @return \de\addvideo\client\model\MetadataFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addMetadata($body)
    {
        list($response) = $this->addMetadataWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addMetadataWithHttpInfo
     *
     * Add a new Metadata object
     *
     * @param \de\addvideo\client\model\MetadataFullDTO $body Metadata object that shall be added (required)
     * @return Array of \de\addvideo\client\model\MetadataFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addMetadataWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addMetadata');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/metadata/addMetadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MetadataFullDTO',
                '/addvideo/service/mam/metadata/addMetadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MetadataFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MetadataFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEntry
     *
     * Delete Entry object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\EntryFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteEntry($id)
    {
        list($response) = $this->deleteEntryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEntryWithHttpInfo
     *
     * Delete Entry object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\EntryFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteEntryWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEntry');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/entry/deleteEntry/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EntryFullDTO',
                '/addvideo/service/mam/entry/deleteEntry/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EntryFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EntryFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFlavor
     *
     * Delete Flavor object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFlavor($id)
    {
        list($response) = $this->deleteFlavorWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFlavorWithHttpInfo
     *
     * Delete Flavor object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFlavorWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/flavor/deleteFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FlavorFullDTO',
                '/addvideo/service/mam/flavor/deleteFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteMAMService
     *
     * Delete MAMService object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\MAMServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteMAMService($id)
    {
        list($response) = $this->deleteMAMServiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteMAMServiceWithHttpInfo
     *
     * Delete MAMService object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\MAMServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteMAMServiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteMAMService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/mam-service/deleteMAMService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MAMServiceFullDTO',
                '/addvideo/service/mam/mam-service/deleteMAMService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MAMServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MAMServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteMetadata
     *
     * Delete Metadata object matching the given id
     *
     * @param \de\addvideo\client\model\EntryIdDTO $id  (required)
     * @return \de\addvideo\client\model\MetadataFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteMetadata($id)
    {
        list($response) = $this->deleteMetadataWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteMetadataWithHttpInfo
     *
     * Delete Metadata object matching the given id
     *
     * @param \de\addvideo\client\model\EntryIdDTO $id  (required)
     * @return Array of \de\addvideo\client\model\MetadataFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteMetadataWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteMetadata');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/metadata/deleteMetadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($id)) {
            $_tempBody = $id;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MetadataFullDTO',
                '/addvideo/service/mam/metadata/deleteMetadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MetadataFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MetadataFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEntry
     *
     * Get Entry object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\EntryFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getEntry($id)
    {
        list($response) = $this->getEntryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEntryWithHttpInfo
     *
     * Get Entry object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\EntryFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getEntryWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEntry');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/entry/getEntry/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EntryFullDTO',
                '/addvideo/service/mam/entry/getEntry/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EntryFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EntryFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFlavor
     *
     * Get Flavor object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFlavor($id)
    {
        list($response) = $this->getFlavorWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFlavorWithHttpInfo
     *
     * Get Flavor object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFlavorWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/flavor/getFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FlavorFullDTO',
                '/addvideo/service/mam/flavor/getFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMAMService
     *
     * Get MAMService object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\MAMServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getMAMService($id)
    {
        list($response) = $this->getMAMServiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMAMServiceWithHttpInfo
     *
     * Get MAMService object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\MAMServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getMAMServiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getMAMService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/mam-service/getMAMService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MAMServiceFullDTO',
                '/addvideo/service/mam/mam-service/getMAMService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MAMServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MAMServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMetadata
     *
     * Get Metadata object for id
     *
     * @param \de\addvideo\client\model\EntryIdDTO $id  (required)
     * @return \de\addvideo\client\model\MetadataFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getMetadata($id)
    {
        list($response) = $this->getMetadataWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMetadataWithHttpInfo
     *
     * Get Metadata object for id
     *
     * @param \de\addvideo\client\model\EntryIdDTO $id  (required)
     * @return Array of \de\addvideo\client\model\MetadataFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getMetadataWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getMetadata');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/metadata/getMetadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($id)) {
            $_tempBody = $id;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MetadataFullDTO',
                '/addvideo/service/mam/metadata/getMetadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MetadataFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MetadataFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listEntries
     *
     * List Entry objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\EntryFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listEntries($body)
    {
        list($response) = $this->listEntriesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listEntriesWithHttpInfo
     *
     * List Entry objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\EntryFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listEntriesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listEntries');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/entry/listEntries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EntryFullDTOListResult',
                '/addvideo/service/mam/entry/listEntries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EntryFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EntryFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFlavors
     *
     * List Flavor objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\FlavorFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFlavors($body)
    {
        list($response) = $this->listFlavorsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listFlavorsWithHttpInfo
     *
     * List Flavor objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\FlavorFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFlavorsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listFlavors');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/flavor/listFlavors";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FlavorFullDTOListResult',
                '/addvideo/service/mam/flavor/listFlavors'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FlavorFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FlavorFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listMAMServices
     *
     * List MAMService objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\MAMServiceFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listMAMServices($body)
    {
        list($response) = $this->listMAMServicesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listMAMServicesWithHttpInfo
     *
     * List MAMService objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\MAMServiceFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listMAMServicesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listMAMServices');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/mam-service/listMAMServices";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MAMServiceFullDTOListResult',
                '/addvideo/service/mam/mam-service/listMAMServices'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MAMServiceFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MAMServiceFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listMetadatas
     *
     * List Metadata objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\MetadataFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listMetadatas($body)
    {
        list($response) = $this->listMetadatasWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listMetadatasWithHttpInfo
     *
     * List Metadata objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\MetadataFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listMetadatasWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listMetadatas');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/metadata/listMetadatas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MetadataFullDTOListResult',
                '/addvideo/service/mam/metadata/listMetadatas'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MetadataFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MetadataFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEntry
     *
     * Update Entry object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\EntryFullDTO $body Entry object that shall be updated (required)
     * @return \de\addvideo\client\model\EntryFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateEntry($id, $body)
    {
        list($response) = $this->updateEntryWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateEntryWithHttpInfo
     *
     * Update Entry object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\EntryFullDTO $body Entry object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\EntryFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateEntryWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEntry');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateEntry');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/entry/updateEntry/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EntryFullDTO',
                '/addvideo/service/mam/entry/updateEntry/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EntryFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EntryFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFlavor
     *
     * Update Flavor object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FlavorFullDTO $body Flavor object that shall be updated (required)
     * @return \de\addvideo\client\model\FlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFlavor($id, $body)
    {
        list($response) = $this->updateFlavorWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateFlavorWithHttpInfo
     *
     * Update Flavor object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FlavorFullDTO $body Flavor object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\FlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFlavorWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFlavor');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/flavor/updateFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FlavorFullDTO',
                '/addvideo/service/mam/flavor/updateFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMAMService
     *
     * Update MAMService object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\MAMServiceFullDTO $body MAMService object that shall be updated (required)
     * @return \de\addvideo\client\model\MAMServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateMAMService($id, $body)
    {
        list($response) = $this->updateMAMServiceWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateMAMServiceWithHttpInfo
     *
     * Update MAMService object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\MAMServiceFullDTO $body MAMService object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\MAMServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateMAMServiceWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateMAMService');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateMAMService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/mam-service/updateMAMService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MAMServiceFullDTO',
                '/addvideo/service/mam/mam-service/updateMAMService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MAMServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MAMServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMetadata
     *
     * Update Metadata object
     *
     * @param \de\addvideo\client\model\MetadataFullDTO $value  (required)
     * @return \de\addvideo\client\model\MetadataFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateMetadata($value)
    {
        list($response) = $this->updateMetadataWithHttpInfo($value);
        return $response;
    }

    /**
     * Operation updateMetadataWithHttpInfo
     *
     * Update Metadata object
     *
     * @param \de\addvideo\client\model\MetadataFullDTO $value  (required)
     * @return Array of \de\addvideo\client\model\MetadataFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateMetadataWithHttpInfo($value)
    {
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateMetadata');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/mam/metadata/updateMetadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($value)) {
            $_tempBody = $value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\MetadataFullDTO',
                '/addvideo/service/mam/metadata/updateMetadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\MetadataFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\MetadataFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
