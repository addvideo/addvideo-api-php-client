<?php
/**
 * AddvideoworkflowApi
 * PHP version 5
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AddVideo REST API v1
 *
 * <h1>Welcome to AddVideo | easy video integration into your project</h1><p>AddVideo offers the integration of professional online video services and capabilities such as CDN, encoding, asset management and complex distribution workflows  with your favourite CMS. AddVideo processes and distributes your video contents as required, without interface- or CDN-specific implementations. Using AddVideo you will get:</p><ul><li>API: a powerful REST-API with free client SDKs available in many different programming languages incl. examples at http://github.com/addvideo</li><li>Encoding: media processing and video encoding services</li><li>CDN: use diverse very powerful global CDNs to distribute your contents</li><li>OTT: access to useful functionalities via the API</li><li>Development, Service und Maintenance: our team of high class software engineers and online video specialists is located in Frankfurt/Germany</li><li>Powerfull Infrastructure: system operations in high class data centres in Germany</li><li>In General: a fast growing set of features</li></ul><p>It has never been easier to add professional video modules to your platform on demand. AddVideo helps to slimline your integration efforts and provides the whole video workflow accessible through a simple programming interface.</p>
 *
 * OpenAPI spec version: 1
 * Contact: info@addvideo.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace de\addvideo\client\api;

use \de\addvideo\client\Configuration;
use \de\addvideo\client\ApiClient;
use \de\addvideo\client\ApiException;
use \de\addvideo\client\ObjectSerializer;

/**
 * AddvideoworkflowApi Class Doc Comment
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddvideoworkflowApi
{

    /**
     * API Client
     *
     * @var \de\addvideo\client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \de\addvideo\client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\de\addvideo\client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.addvideo.de/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \de\addvideo\client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \de\addvideo\client\ApiClient $apiClient set the API client
     *
     * @return AddvideoworkflowApi
     */
    public function setApiClient(\de\addvideo\client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getPlayoutURLs
     *
     * Get playout URLs for specififc entry.
     *
     * @param string $entryId Id of entry to retrieve playout URLs for (required)
     * @return \de\addvideo\client\model\PlayoutURLsDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getPlayoutURLs($entryId)
    {
        list($response) = $this->getPlayoutURLsWithHttpInfo($entryId);
        return $response;
    }

    /**
     * Operation getPlayoutURLsWithHttpInfo
     *
     * Get playout URLs for specififc entry.
     *
     * @param string $entryId Id of entry to retrieve playout URLs for (required)
     * @return Array of \de\addvideo\client\model\PlayoutURLsDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getPlayoutURLsWithHttpInfo($entryId)
    {
        // verify the required parameter 'entryId' is set
        if ($entryId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryId when calling getPlayoutURLs');
        }
        // parse inputs
        $resourcePath = "/addvideo/workflow/playout/getPlayoutURLs/{entry-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($entryId !== null) {
            $resourcePath = str_replace(
                "{" . "entry-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\PlayoutURLsDTO',
                '/addvideo/workflow/playout/getPlayoutURLs/{entry-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\PlayoutURLsDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\PlayoutURLsDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVideoPreviewThumbnailsURLs
     *
     * Get video preview thumbnails URLs for specififc entry.
     *
     * @param string $entryId Id of entry to retrieve video preview thumbnails URLs for (required)
     * @return \de\addvideo\client\model\VideoPreviewThumbnailsURLsDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getVideoPreviewThumbnailsURLs($entryId)
    {
        list($response) = $this->getVideoPreviewThumbnailsURLsWithHttpInfo($entryId);
        return $response;
    }

    /**
     * Operation getVideoPreviewThumbnailsURLsWithHttpInfo
     *
     * Get video preview thumbnails URLs for specififc entry.
     *
     * @param string $entryId Id of entry to retrieve video preview thumbnails URLs for (required)
     * @return Array of \de\addvideo\client\model\VideoPreviewThumbnailsURLsDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getVideoPreviewThumbnailsURLsWithHttpInfo($entryId)
    {
        // verify the required parameter 'entryId' is set
        if ($entryId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryId when calling getVideoPreviewThumbnailsURLs');
        }
        // parse inputs
        $resourcePath = "/addvideo/workflow/playout/getVideoPreviewThumbnailsURLs/{entry-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($entryId !== null) {
            $resourcePath = str_replace(
                "{" . "entry-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\VideoPreviewThumbnailsURLsDTO',
                '/addvideo/workflow/playout/getVideoPreviewThumbnailsURLs/{entry-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\VideoPreviewThumbnailsURLsDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\VideoPreviewThumbnailsURLsDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ingest
     *
     * Ingest new video
     *
     * @param \de\addvideo\client\model\IngestDataDTO $body IngestDataDTO object containing all ingest data (required)
     * @return \de\addvideo\client\model\IngestResultDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function ingest($body)
    {
        list($response) = $this->ingestWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation ingestWithHttpInfo
     *
     * Ingest new video
     *
     * @param \de\addvideo\client\model\IngestDataDTO $body IngestDataDTO object containing all ingest data (required)
     * @return Array of \de\addvideo\client\model\IngestResultDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function ingestWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling ingest');
        }
        // parse inputs
        $resourcePath = "/addvideo/workflow/ingest/createJob";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\IngestResultDTO',
                '/addvideo/workflow/ingest/createJob'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\IngestResultDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\IngestResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation status
     *
     * Get status for ingest job
     *
     * @param string $ingestJobId  (required)
     * @return \de\addvideo\client\model\IngestStatusDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function status($ingestJobId)
    {
        list($response) = $this->statusWithHttpInfo($ingestJobId);
        return $response;
    }

    /**
     * Operation statusWithHttpInfo
     *
     * Get status for ingest job
     *
     * @param string $ingestJobId  (required)
     * @return Array of \de\addvideo\client\model\IngestStatusDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function statusWithHttpInfo($ingestJobId)
    {
        // verify the required parameter 'ingestJobId' is set
        if ($ingestJobId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ingestJobId when calling status');
        }
        // parse inputs
        $resourcePath = "/addvideo/workflow/ingest/status/{ingest-job-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($ingestJobId !== null) {
            $resourcePath = str_replace(
                "{" . "ingest-job-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ingestJobId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\IngestStatusDTO',
                '/addvideo/workflow/ingest/status/{ingest-job-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\IngestStatusDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\IngestStatusDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
