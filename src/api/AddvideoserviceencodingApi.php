<?php
/**
 * AddvideoserviceencodingApi
 * PHP version 5
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AddVideo REST API v1
 *
 * <h1>Willkommen bei AddVideo | add video to your project</h1><p>Nutzen Sie die Technologie von AddVideo zur Verbindung von CMS- mit CDN-Funktionalitäten. Mit AddVideo verarbeiten und distribuieren Sie Ihre Videoinhalte ganz nach Bedarf. Werden Sie und Ihre Anwendungen unabhängig von Oberflächen oder CDN-spezifischen Anforderungen. AddVideo bietet Ihnen:</p><ul><li>individuelle Nutzung durch Anbindung über Rest-API</li><li>Client SDKs in vielen Programmiersprachen frei verfügbar unter http://github.com/addvideo</li><li>Media Processing und Video Encoding Services</li><li>Betrieb und Datenhaltung in Rechenzentren in Deutschland</li><li>Service und Betrieb durch ein erfahrenes Team von Videospezialisten in Frankfurt am Main</li><li>einen stetig wachsenden Funktionsumfang</li><li>eine stetig wachsende Anzahl an angebundenen CDNs</li><li>Nutzung von zahlreichen OTT-Funktionen über die API</li></ul><p>Bei AddVideo können Sie individuell selbst entscheiden, welche Bausteine Sie für Ihre Videoverwaltung benötigen. Bestehende Systeme und Lösungen lassen sich komfortabel anbinden.</p>
 *
 * OpenAPI spec version: 1
 * Contact: info@addvideo.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace de\addvideo\client\api;

use \de\addvideo\client\Configuration;
use \de\addvideo\client\ApiClient;
use \de\addvideo\client\ApiException;
use \de\addvideo\client\ObjectSerializer;

/**
 * AddvideoserviceencodingApi Class Doc Comment
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddvideoserviceencodingApi
{

    /**
     * API Client
     *
     * @var \de\addvideo\client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \de\addvideo\client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\de\addvideo\client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.addvideo.de/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \de\addvideo\client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \de\addvideo\client\ApiClient $apiClient set the API client
     *
     * @return AddvideoserviceencodingApi
     */
    public function setApiClient(\de\addvideo\client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addEncodingService
     *
     * Add a new EncodingService object
     *
     * @param \de\addvideo\client\model\EncodingServiceFullDTO $body EncodingService object that shall be added (required)
     * @return \de\addvideo\client\model\EncodingServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addEncodingService($body)
    {
        list($response) = $this->addEncodingServiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addEncodingServiceWithHttpInfo
     *
     * Add a new EncodingService object
     *
     * @param \de\addvideo\client\model\EncodingServiceFullDTO $body EncodingService object that shall be added (required)
     * @return Array of \de\addvideo\client\model\EncodingServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addEncodingServiceWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addEncodingService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/encoding-service/addEncodingService";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EncodingServiceFullDTO',
                '/addvideo/service/encoding/encoding-service/addEncodingService'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EncodingServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EncodingServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFFMPEGEncodingFlavor
     *
     * Add a new FFMPEGEncodingFlavor object
     *
     * @param \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO $body FFMPEGEncodingFlavor object that shall be added (required)
     * @return \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFFMPEGEncodingFlavor($body)
    {
        list($response) = $this->addFFMPEGEncodingFlavorWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addFFMPEGEncodingFlavorWithHttpInfo
     *
     * Add a new FFMPEGEncodingFlavor object
     *
     * @param \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO $body FFMPEGEncodingFlavor object that shall be added (required)
     * @return Array of \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFFMPEGEncodingFlavorWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addFFMPEGEncodingFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/ffmpeg-encoding-flavor/addFFMPEGEncodingFlavor";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO',
                '/addvideo/service/encoding/ffmpeg-encoding-flavor/addFFMPEGEncodingFlavor'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEncodingService
     *
     * Delete EncodingService object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\EncodingServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteEncodingService($id)
    {
        list($response) = $this->deleteEncodingServiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEncodingServiceWithHttpInfo
     *
     * Delete EncodingService object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\EncodingServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteEncodingServiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEncodingService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/encoding-service/deleteEncodingService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EncodingServiceFullDTO',
                '/addvideo/service/encoding/encoding-service/deleteEncodingService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EncodingServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EncodingServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFFMPEGEncodingFlavor
     *
     * Delete FFMPEGEncodingFlavor object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFFMPEGEncodingFlavor($id)
    {
        list($response) = $this->deleteFFMPEGEncodingFlavorWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFFMPEGEncodingFlavorWithHttpInfo
     *
     * Delete FFMPEGEncodingFlavor object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFFMPEGEncodingFlavorWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFFMPEGEncodingFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/ffmpeg-encoding-flavor/deleteFFMPEGEncodingFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO',
                '/addvideo/service/encoding/ffmpeg-encoding-flavor/deleteFFMPEGEncodingFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEncodingService
     *
     * Get EncodingService object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\EncodingServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getEncodingService($id)
    {
        list($response) = $this->getEncodingServiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEncodingServiceWithHttpInfo
     *
     * Get EncodingService object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\EncodingServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getEncodingServiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEncodingService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/encoding-service/getEncodingService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EncodingServiceFullDTO',
                '/addvideo/service/encoding/encoding-service/getEncodingService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EncodingServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EncodingServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFFMPEGEncodingFlavor
     *
     * Get FFMPEGEncodingFlavor object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFFMPEGEncodingFlavor($id)
    {
        list($response) = $this->getFFMPEGEncodingFlavorWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFFMPEGEncodingFlavorWithHttpInfo
     *
     * Get FFMPEGEncodingFlavor object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFFMPEGEncodingFlavorWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFFMPEGEncodingFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/ffmpeg-encoding-flavor/getFFMPEGEncodingFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO',
                '/addvideo/service/encoding/ffmpeg-encoding-flavor/getFFMPEGEncodingFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listEncodingServices
     *
     * List EncodingService objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\EncodingServiceFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listEncodingServices($body)
    {
        list($response) = $this->listEncodingServicesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listEncodingServicesWithHttpInfo
     *
     * List EncodingService objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\EncodingServiceFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listEncodingServicesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listEncodingServices');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/encoding-service/listEncodingServices";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EncodingServiceFullDTOListResult',
                '/addvideo/service/encoding/encoding-service/listEncodingServices'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EncodingServiceFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EncodingServiceFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFFMPEGEncodingFlavors
     *
     * List FFMPEGEncodingFlavor objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFFMPEGEncodingFlavors($body)
    {
        list($response) = $this->listFFMPEGEncodingFlavorsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listFFMPEGEncodingFlavorsWithHttpInfo
     *
     * List FFMPEGEncodingFlavor objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFFMPEGEncodingFlavorsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listFFMPEGEncodingFlavors');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/ffmpeg-encoding-flavor/listFFMPEGEncodingFlavors";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTOListResult',
                '/addvideo/service/encoding/ffmpeg-encoding-flavor/listFFMPEGEncodingFlavors'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEncodingService
     *
     * Update EncodingService object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\EncodingServiceFullDTO $body EncodingService object that shall be updated (required)
     * @return \de\addvideo\client\model\EncodingServiceFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateEncodingService($id, $body)
    {
        list($response) = $this->updateEncodingServiceWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateEncodingServiceWithHttpInfo
     *
     * Update EncodingService object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\EncodingServiceFullDTO $body EncodingService object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\EncodingServiceFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateEncodingServiceWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEncodingService');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateEncodingService');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/encoding-service/updateEncodingService/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\EncodingServiceFullDTO',
                '/addvideo/service/encoding/encoding-service/updateEncodingService/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\EncodingServiceFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\EncodingServiceFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFFMPEGEncodingFlavor
     *
     * Update FFMPEGEncodingFlavor object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO $body FFMPEGEncodingFlavor object that shall be updated (required)
     * @return \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFFMPEGEncodingFlavor($id, $body)
    {
        list($response) = $this->updateFFMPEGEncodingFlavorWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateFFMPEGEncodingFlavorWithHttpInfo
     *
     * Update FFMPEGEncodingFlavor object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO $body FFMPEGEncodingFlavor object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFFMPEGEncodingFlavorWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFFMPEGEncodingFlavor');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateFFMPEGEncodingFlavor');
        }
        // parse inputs
        $resourcePath = "/addvideo/service/encoding/ffmpeg-encoding-flavor/updateFFMPEGEncodingFlavor/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO',
                '/addvideo/service/encoding/ffmpeg-encoding-flavor/updateFFMPEGEncodingFlavor/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FFMPEGEncodingFlavorFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
