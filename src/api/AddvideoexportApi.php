<?php
/**
 * AddvideoexportApi
 * PHP version 5
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AddVideo REST API v1
 *
 * <h1>Willkommen bei AddVideo | add video to your project</h1><p>Nutzen Sie die Technologie von AddVideo zur Verbindung von CMS- mit CDN-FunktionalitÃ¤ten. Mit AddVideo verarbeiten und distribuieren Sie Ihre Videoinhalte ganz nach Bedarf. Werden Sie und Ihre Anwendungen unabhÃ¤ngig von OberflÃ¤chen oder CDN-spezifischen Anforderungen. AddVideo bietet Ihnen:</p><ul><li>individuelle Nutzung durch Anbindung Ã¼ber Rest-API</li><li>Client SDKs in vielen Programmiersprachen frei verfÃ¼gbar unter http://github.com/addvideo</li><li>Media Processing und Video Encoding Services</li><li>Betrieb und Datenhaltung in Rechenzentren in Deutschland</li><li>Service und Betrieb durch ein erfahrenes Team von Videospezialisten in Frankfurt am Main</li><li>einen stetig wachsenden Funktionsumfang</li><li>eine stetig wachsende Anzahl an angebundenen CDNs</li><li>Nutzung von zahlreichen OTT-Funktionen Ã¼ber die API</li></ul><p>Bei AddVideo kÃ¶nnen Sie individuell selbst entscheiden, welche Bausteine Sie fÃ¼r Ihre Videoverwaltung benÃ¶tigen. Bestehende Systeme und LÃ¶sungen lassen sich komfortabel anbinden.</p>
 *
 * OpenAPI spec version: 1
 * Contact: info@addvideo.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace de\addvideo\client\api;

use \de\addvideo\client\Configuration;
use \de\addvideo\client\ApiClient;
use \de\addvideo\client\ApiException;
use \de\addvideo\client\ObjectSerializer;

/**
 * AddvideoexportApi Class Doc Comment
 *
 * @category Class
 * @package  de\addvideo\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddvideoexportApi
{

    /**
     * API Client
     *
     * @var \de\addvideo\client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \de\addvideo\client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\de\addvideo\client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.addvideo.de/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \de\addvideo\client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \de\addvideo\client\ApiClient $apiClient set the API client
     *
     * @return AddvideoexportApi
     */
    public function setApiClient(\de\addvideo\client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addFTPCompletedExport
     *
     * Add a new FTPCompletedExport object
     *
     * @param \de\addvideo\client\model\FTPCompletedExportFullDTO $body FTPCompletedExport object that shall be added (required)
     * @return \de\addvideo\client\model\FTPCompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFTPCompletedExport($body)
    {
        list($response) = $this->addFTPCompletedExportWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addFTPCompletedExportWithHttpInfo
     *
     * Add a new FTPCompletedExport object
     *
     * @param \de\addvideo\client\model\FTPCompletedExportFullDTO $body FTPCompletedExport object that shall be added (required)
     * @return Array of \de\addvideo\client\model\FTPCompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFTPCompletedExportWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addFTPCompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-completed-export/addFTPCompletedExport";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPCompletedExportFullDTO',
                '/addvideo/export/ftp-completed-export/addFTPCompletedExport'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPCompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPCompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFTPExportConfig
     *
     * Add a new FTPExportConfig object
     *
     * @param \de\addvideo\client\model\FTPExportConfigFullDTO $body FTPExportConfig object that shall be added (required)
     * @return \de\addvideo\client\model\FTPExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFTPExportConfig($body)
    {
        list($response) = $this->addFTPExportConfigWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addFTPExportConfigWithHttpInfo
     *
     * Add a new FTPExportConfig object
     *
     * @param \de\addvideo\client\model\FTPExportConfigFullDTO $body FTPExportConfig object that shall be added (required)
     * @return Array of \de\addvideo\client\model\FTPExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addFTPExportConfigWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addFTPExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-export-config/addFTPExportConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPExportConfigFullDTO',
                '/addvideo/export/ftp-export-config/addFTPExportConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addS3CompletedExport
     *
     * Add a new S3CompletedExport object
     *
     * @param \de\addvideo\client\model\S3CompletedExportFullDTO $body S3CompletedExport object that shall be added (required)
     * @return \de\addvideo\client\model\S3CompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addS3CompletedExport($body)
    {
        list($response) = $this->addS3CompletedExportWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addS3CompletedExportWithHttpInfo
     *
     * Add a new S3CompletedExport object
     *
     * @param \de\addvideo\client\model\S3CompletedExportFullDTO $body S3CompletedExport object that shall be added (required)
     * @return Array of \de\addvideo\client\model\S3CompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addS3CompletedExportWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addS3CompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-completed-export/addS3CompletedExport";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3CompletedExportFullDTO',
                '/addvideo/export/s3-completed-export/addS3CompletedExport'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3CompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3CompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addS3ExportConfig
     *
     * Add a new S3ExportConfig object
     *
     * @param \de\addvideo\client\model\S3ExportConfigFullDTO $body S3ExportConfig object that shall be added (required)
     * @return \de\addvideo\client\model\S3ExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addS3ExportConfig($body)
    {
        list($response) = $this->addS3ExportConfigWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addS3ExportConfigWithHttpInfo
     *
     * Add a new S3ExportConfig object
     *
     * @param \de\addvideo\client\model\S3ExportConfigFullDTO $body S3ExportConfig object that shall be added (required)
     * @return Array of \de\addvideo\client\model\S3ExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function addS3ExportConfigWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addS3ExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-export-config/addS3ExportConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3ExportConfigFullDTO',
                '/addvideo/export/s3-export-config/addS3ExportConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3ExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3ExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFTPCompletedExport
     *
     * Delete FTPCompletedExport object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FTPCompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFTPCompletedExport($id)
    {
        list($response) = $this->deleteFTPCompletedExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFTPCompletedExportWithHttpInfo
     *
     * Delete FTPCompletedExport object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FTPCompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFTPCompletedExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFTPCompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-completed-export/deleteFTPCompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPCompletedExportFullDTO',
                '/addvideo/export/ftp-completed-export/deleteFTPCompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPCompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPCompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFTPExportConfig
     *
     * Delete FTPExportConfig object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FTPExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFTPExportConfig($id)
    {
        list($response) = $this->deleteFTPExportConfigWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFTPExportConfigWithHttpInfo
     *
     * Delete FTPExportConfig object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FTPExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteFTPExportConfigWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFTPExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-export-config/deleteFTPExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPExportConfigFullDTO',
                '/addvideo/export/ftp-export-config/deleteFTPExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteS3CompletedExport
     *
     * Delete S3CompletedExport object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\S3CompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteS3CompletedExport($id)
    {
        list($response) = $this->deleteS3CompletedExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteS3CompletedExportWithHttpInfo
     *
     * Delete S3CompletedExport object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\S3CompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteS3CompletedExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteS3CompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-completed-export/deleteS3CompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3CompletedExportFullDTO',
                '/addvideo/export/s3-completed-export/deleteS3CompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3CompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3CompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteS3ExportConfig
     *
     * Delete S3ExportConfig object matching the given id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\S3ExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteS3ExportConfig($id)
    {
        list($response) = $this->deleteS3ExportConfigWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteS3ExportConfigWithHttpInfo
     *
     * Delete S3ExportConfig object matching the given id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\S3ExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function deleteS3ExportConfigWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteS3ExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-export-config/deleteS3ExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3ExportConfigFullDTO',
                '/addvideo/export/s3-export-config/deleteS3ExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3ExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3ExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFTPCompletedExport
     *
     * Get FTPCompletedExport object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FTPCompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFTPCompletedExport($id)
    {
        list($response) = $this->getFTPCompletedExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFTPCompletedExportWithHttpInfo
     *
     * Get FTPCompletedExport object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FTPCompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFTPCompletedExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFTPCompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-completed-export/getFTPCompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPCompletedExportFullDTO',
                '/addvideo/export/ftp-completed-export/getFTPCompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPCompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPCompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFTPExportConfig
     *
     * Get FTPExportConfig object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\FTPExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFTPExportConfig($id)
    {
        list($response) = $this->getFTPExportConfigWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFTPExportConfigWithHttpInfo
     *
     * Get FTPExportConfig object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\FTPExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getFTPExportConfigWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFTPExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-export-config/getFTPExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPExportConfigFullDTO',
                '/addvideo/export/ftp-export-config/getFTPExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getS3CompletedExport
     *
     * Get S3CompletedExport object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\S3CompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getS3CompletedExport($id)
    {
        list($response) = $this->getS3CompletedExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getS3CompletedExportWithHttpInfo
     *
     * Get S3CompletedExport object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\S3CompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getS3CompletedExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getS3CompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-completed-export/getS3CompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3CompletedExportFullDTO',
                '/addvideo/export/s3-completed-export/getS3CompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3CompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3CompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getS3ExportConfig
     *
     * Get S3ExportConfig object for id
     *
     * @param string $id  (required)
     * @return \de\addvideo\client\model\S3ExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getS3ExportConfig($id)
    {
        list($response) = $this->getS3ExportConfigWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getS3ExportConfigWithHttpInfo
     *
     * Get S3ExportConfig object for id
     *
     * @param string $id  (required)
     * @return Array of \de\addvideo\client\model\S3ExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function getS3ExportConfigWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getS3ExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-export-config/getS3ExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3ExportConfigFullDTO',
                '/addvideo/export/s3-export-config/getS3ExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3ExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3ExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFTPCompletedExports
     *
     * List FTPCompletedExport objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\FTPCompletedExportFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFTPCompletedExports($body)
    {
        list($response) = $this->listFTPCompletedExportsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listFTPCompletedExportsWithHttpInfo
     *
     * List FTPCompletedExport objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\FTPCompletedExportFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFTPCompletedExportsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listFTPCompletedExports');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-completed-export/listFTPCompletedExports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPCompletedExportFullDTOListResult',
                '/addvideo/export/ftp-completed-export/listFTPCompletedExports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPCompletedExportFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPCompletedExportFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFTPExportConfigs
     *
     * List FTPExportConfig objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\FTPExportConfigFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFTPExportConfigs($body)
    {
        list($response) = $this->listFTPExportConfigsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listFTPExportConfigsWithHttpInfo
     *
     * List FTPExportConfig objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\FTPExportConfigFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listFTPExportConfigsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listFTPExportConfigs');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-export-config/listFTPExportConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPExportConfigFullDTOListResult',
                '/addvideo/export/ftp-export-config/listFTPExportConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPExportConfigFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPExportConfigFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listS3CompletedExports
     *
     * List S3CompletedExport objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\S3CompletedExportFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listS3CompletedExports($body)
    {
        list($response) = $this->listS3CompletedExportsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listS3CompletedExportsWithHttpInfo
     *
     * List S3CompletedExport objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\S3CompletedExportFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listS3CompletedExportsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listS3CompletedExports');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-completed-export/listS3CompletedExports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3CompletedExportFullDTOListResult',
                '/addvideo/export/s3-completed-export/listS3CompletedExports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3CompletedExportFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3CompletedExportFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listS3ExportConfigs
     *
     * List S3ExportConfig objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return \de\addvideo\client\model\S3ExportConfigFullDTOListResult
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listS3ExportConfigs($body)
    {
        list($response) = $this->listS3ExportConfigsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listS3ExportConfigsWithHttpInfo
     *
     * List S3ExportConfig objects depending on filter
     *
     * @param \de\addvideo\client\model\ResultFilterDTO $body Filter to be applied to results (required)
     * @return Array of \de\addvideo\client\model\S3ExportConfigFullDTOListResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function listS3ExportConfigsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listS3ExportConfigs');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-export-config/listS3ExportConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3ExportConfigFullDTOListResult',
                '/addvideo/export/s3-export-config/listS3ExportConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3ExportConfigFullDTOListResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3ExportConfigFullDTOListResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFTPCompletedExport
     *
     * Update FTPCompletedExport object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FTPCompletedExportFullDTO $body FTPCompletedExport object that shall be updated (required)
     * @return \de\addvideo\client\model\FTPCompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFTPCompletedExport($id, $body)
    {
        list($response) = $this->updateFTPCompletedExportWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateFTPCompletedExportWithHttpInfo
     *
     * Update FTPCompletedExport object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FTPCompletedExportFullDTO $body FTPCompletedExport object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\FTPCompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFTPCompletedExportWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFTPCompletedExport');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateFTPCompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-completed-export/updateFTPCompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPCompletedExportFullDTO',
                '/addvideo/export/ftp-completed-export/updateFTPCompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPCompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPCompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFTPExportConfig
     *
     * Update FTPExportConfig object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FTPExportConfigFullDTO $body FTPExportConfig object that shall be updated (required)
     * @return \de\addvideo\client\model\FTPExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFTPExportConfig($id, $body)
    {
        list($response) = $this->updateFTPExportConfigWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateFTPExportConfigWithHttpInfo
     *
     * Update FTPExportConfig object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\FTPExportConfigFullDTO $body FTPExportConfig object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\FTPExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateFTPExportConfigWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFTPExportConfig');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateFTPExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/ftp-export-config/updateFTPExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\FTPExportConfigFullDTO',
                '/addvideo/export/ftp-export-config/updateFTPExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\FTPExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\FTPExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateS3CompletedExport
     *
     * Update S3CompletedExport object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\S3CompletedExportFullDTO $body S3CompletedExport object that shall be updated (required)
     * @return \de\addvideo\client\model\S3CompletedExportFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateS3CompletedExport($id, $body)
    {
        list($response) = $this->updateS3CompletedExportWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateS3CompletedExportWithHttpInfo
     *
     * Update S3CompletedExport object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\S3CompletedExportFullDTO $body S3CompletedExport object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\S3CompletedExportFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateS3CompletedExportWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateS3CompletedExport');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateS3CompletedExport');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-completed-export/updateS3CompletedExport/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3CompletedExportFullDTO',
                '/addvideo/export/s3-completed-export/updateS3CompletedExport/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3CompletedExportFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3CompletedExportFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateS3ExportConfig
     *
     * Update S3ExportConfig object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\S3ExportConfigFullDTO $body S3ExportConfig object that shall be updated (required)
     * @return \de\addvideo\client\model\S3ExportConfigFullDTO
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateS3ExportConfig($id, $body)
    {
        list($response) = $this->updateS3ExportConfigWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateS3ExportConfigWithHttpInfo
     *
     * Update S3ExportConfig object
     *
     * @param string $id  (required)
     * @param \de\addvideo\client\model\S3ExportConfigFullDTO $body S3ExportConfig object that shall be updated (required)
     * @return Array of \de\addvideo\client\model\S3ExportConfigFullDTO, HTTP status code, HTTP response headers (array of strings)
     * @throws \de\addvideo\client\ApiException on non-2xx response
     */
    public function updateS3ExportConfigWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateS3ExportConfig');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateS3ExportConfig');
        }
        // parse inputs
        $resourcePath = "/addvideo/export/s3-export-config/updateS3ExportConfig/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\de\addvideo\client\model\S3ExportConfigFullDTO',
                '/addvideo/export/s3-export-config/updateS3ExportConfig/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\de\addvideo\client\model\S3ExportConfigFullDTO', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\S3ExportConfigFullDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\de\addvideo\client\model\APIResultDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
